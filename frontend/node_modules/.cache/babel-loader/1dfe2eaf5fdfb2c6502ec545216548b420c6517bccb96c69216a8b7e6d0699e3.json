{"ast":null,"code":"var _jsxFileName = \"/Users/sarang_daddy/Documents/second-hand/frontend/src/pages/Chat/index.tsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { CHATROOM } from '../../constants/routeUrl';\nimport { ACCESS_TOKEN } from '../../constants/login';\nimport { getRoomsList } from '../../api/chat';\nimport * as S from './styles';\nimport NavBarTitle from '../../components/NavBarTitle';\nimport ChatRoom from '../../components/ChatRoom/intex';\n\n// TODO : 채팅 페이지 꾸미기\n// TODO : 채팅방 목록 받아오기에서 판매자 이름도 필요함\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n  const [myChatRoomList, setMyChatRoomList] = useState([]);\n  const isResultEmpty = (myChatRoomList === null || myChatRoomList === void 0 ? void 0 : myChatRoomList.length) === 0;\n  const checkChatRooms = async () => {\n    const roomsList = await getRoomsList(accessToken);\n    setMyChatRoomList(roomsList);\n  };\n  const enterChatRoom = (roomId, productId) => {\n    sessionStorage.setItem('curRoomId', roomId);\n    sessionStorage.setItem('curProductsId', productId);\n    navigate(`${CHATROOM}/${roomId}`);\n  };\n  useEffect(() => {\n    checkChatRooms();\n  }, []);\n  console.log(myChatRoomList);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBarTitle, {\n      type: \"high\",\n      centerTitle: \"\\uCC44\\uD305\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), !isResultEmpty ? /*#__PURE__*/_jsxDEV(S.ItemsContainer, {\n      children: myChatRoomList.map(room => /*#__PURE__*/_jsxDEV(ChatRoom, {\n        roomId: room.roomId,\n        productId: room.productId,\n        sellerNickName: room.sellerNickName,\n        onClick: () => enterChatRoom(room.roomId, room.productId),\n        sellerProfileUrl: room.sellerProfileUrl\n      }, room.roomId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(S.Empty, {\n      children: \"\\uAD00\\uC2EC \\uC0C1\\uD488\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatPage, \"GqW/N5nMQ9aFas4lvkItUm/fo8Y=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["useNavigate","useEffect","useState","CHATROOM","ACCESS_TOKEN","getRoomsList","S","NavBarTitle","ChatRoom","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","navigate","accessToken","localStorage","getItem","myChatRoomList","setMyChatRoomList","isResultEmpty","length","checkChatRooms","roomsList","enterChatRoom","roomId","productId","sessionStorage","setItem","console","log","children","type","centerTitle","fileName","_jsxFileName","lineNumber","columnNumber","ItemsContainer","map","room","sellerNickName","onClick","sellerProfileUrl","Empty","_c","$RefreshReg$"],"sources":["/Users/sarang_daddy/Documents/second-hand/frontend/src/pages/Chat/index.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport { CHATROOM } from '../../constants/routeUrl';\nimport { ACCESS_TOKEN } from '../../constants/login';\nimport { getRoomsList } from '../../api/chat';\nimport { Room } from '../../constants/types';\n\nimport * as S from './styles';\nimport NavBarTitle from '../../components/NavBarTitle';\nimport ChatRoom from '../../components/ChatRoom/intex';\n\n// TODO : 채팅 페이지 꾸미기\n// TODO : 채팅방 목록 받아오기에서 판매자 이름도 필요함\n\nconst ChatPage = () => {\n  const navigate = useNavigate();\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  const [myChatRoomList, setMyChatRoomList] = useState<Room[]>([]);\n  const isResultEmpty: boolean = myChatRoomList?.length === 0;\n\n  const checkChatRooms = async () => {\n    const roomsList = await getRoomsList(accessToken);\n    setMyChatRoomList(roomsList);\n  };\n\n  const enterChatRoom = (roomId: string, productId: string) => {\n    sessionStorage.setItem('curRoomId', roomId);\n    sessionStorage.setItem('curProductsId', productId);\n    navigate(`${CHATROOM}/${roomId}`);\n  };\n\n  useEffect(() => {\n    checkChatRooms();\n  }, []);\n\n  console.log(myChatRoomList);\n\n  return (\n    <>\n      <NavBarTitle type=\"high\" centerTitle=\"채팅\" />\n      {!isResultEmpty ? (\n        <S.ItemsContainer>\n          {myChatRoomList.map((room) => (\n            <ChatRoom\n              key={room.roomId}\n              roomId={room.roomId}\n              productId={room.productId}\n              sellerNickName={room.sellerNickName}\n              onClick={() => enterChatRoom(room.roomId, room.productId)}\n              sellerProfileUrl={room.sellerProfileUrl}\n            />\n          ))}\n        </S.ItemsContainer>\n      ) : (\n        <S.Empty>관심 상품이 없습니다.</S.Empty>\n      )}\n    </>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,YAAY,QAAQ,gBAAgB;AAG7C,OAAO,KAAKC,CAAC,MAAM,UAAU;AAC7B,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,QAAQ,MAAM,iCAAiC;;AAEtD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAACd,YAAY,CAAC;EAEtD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAS,EAAE,CAAC;EAChE,MAAMmB,aAAsB,GAAG,CAAAF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,MAAM,MAAK,CAAC;EAE3D,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,SAAS,GAAG,MAAMnB,YAAY,CAACW,WAAW,CAAC;IACjDI,iBAAiB,CAACI,SAAS,CAAC;EAC9B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACC,MAAc,EAAEC,SAAiB,KAAK;IAC3DC,cAAc,CAACC,OAAO,CAAC,WAAW,EAAEH,MAAM,CAAC;IAC3CE,cAAc,CAACC,OAAO,CAAC,eAAe,EAAEF,SAAS,CAAC;IAClDZ,QAAQ,CAAE,GAAEZ,QAAS,IAAGuB,MAAO,EAAC,CAAC;EACnC,CAAC;EAEDzB,SAAS,CAAC,MAAM;IACdsB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAENO,OAAO,CAACC,GAAG,CAACZ,cAAc,CAAC;EAE3B,oBACET,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACEtB,OAAA,CAACH,WAAW;MAAC0B,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3C,CAACjB,aAAa,gBACbX,OAAA,CAACJ,CAAC,CAACiC,cAAc;MAAAP,QAAA,EACdb,cAAc,CAACqB,GAAG,CAAEC,IAAI,iBACvB/B,OAAA,CAACF,QAAQ;QAEPkB,MAAM,EAAEe,IAAI,CAACf,MAAO;QACpBC,SAAS,EAAEc,IAAI,CAACd,SAAU;QAC1Be,cAAc,EAAED,IAAI,CAACC,cAAe;QACpCC,OAAO,EAAEA,CAAA,KAAMlB,aAAa,CAACgB,IAAI,CAACf,MAAM,EAAEe,IAAI,CAACd,SAAS,CAAE;QAC1DiB,gBAAgB,EAAEH,IAAI,CAACG;MAAiB,GALnCH,IAAI,CAACf,MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMjB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc,CAAC,gBAEnB5B,OAAA,CAACJ,CAAC,CAACuC,KAAK;MAAAb,QAAA,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAC/B;EAAA,eACD,CAAC;AAEP,CAAC;AAACxB,EAAA,CA7CID,QAAQ;EAAA,QACKb,WAAW;AAAA;AAAA8C,EAAA,GADxBjC,QAAQ;AA+Cd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}