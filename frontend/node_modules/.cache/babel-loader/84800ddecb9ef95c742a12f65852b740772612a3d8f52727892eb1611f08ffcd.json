{"ast":null,"code":"var _jsxFileName = \"/Users/sarang_daddy/Documents/second-hand/frontend/src/pages/Chatting/index.tsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport { BASE_URL } from '../../constants/api';\nimport useAsync from '../../hooks/useAsync';\nimport { ACCESS_TOKEN } from '../../constants/login';\nimport { getSeller } from '../../api/member';\nimport { getChatDetails, deleteChatRoom } from '../../api/chat';\nimport ChatRoomContents from '../../components/ChatRoomContents';\nimport ChatRoomItem from '../../components/ChatRoomItem';\nimport ChatInputBar from '../../components/ChatInputBar';\nimport NavBarTitle from '../../components/NavBarTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChattingPage = () => {\n  _s();\n  var _sellerData$data;\n  const navigate = useNavigate();\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  // Stomp의 CompatClient 객체를 참조하는 객체 (리렌더링에도 유지를 위해 useRef 사용)\n  // Stomp라이브러리와 소켓 연결을 수행하는 cliet객체에 접근할 수 있게 해준다.\n  const client = useRef(null);\n  const curRoomId = sessionStorage.getItem('curRoomId') || undefined;\n  const curProductsId = sessionStorage.getItem('curProductsId') || undefined;\n\n  // TODO : 판매자 번호 (추후 닉네임으로 받기)\n  const sellerData = useAsync(() => getSeller(accessToken, curRoomId));\n  const sellerId = sellerData === null || sellerData === void 0 ? void 0 : (_sellerData$data = sellerData.data) === null || _sellerData$data === void 0 ? void 0 : _sellerData$data.data.sellerId;\n  const [chatHistory, setChatHistory] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n\n  // 채팅 내역 조회하고 불러오기\n  const checkChatDetails = async () => {\n    try {\n      const chatDetails = await getChatDetails(accessToken, curRoomId);\n      setChatHistory(chatDetails);\n    } catch (error) {\n      console.error('채팅 내역 불러오기 에러:', error);\n    }\n  };\n  useEffect(() => {\n    checkChatDetails();\n  }, [accessToken, curRoomId]);\n\n  // 소켓 연결\n  const connectHandler = () => {\n    // SockJS 클라이언트 객체를 생성하고, 웹 소켓을 연결한다.\n    // ws-stomp는 서버의 Endpoint 경로로, 웹 소켓 통신을 위한 특정 경로를 의미한다.\n    const socket = new SockJS(`${BASE_URL}/ws-stomp`);\n\n    // SockJS 클라이언트 객체 socket를 STOMP 프로토콜로 오버랩하여 client.current에 할당\n    client.current = Stomp.over(socket);\n    // 클라이언트 객체를 서버와 연결\n    client.current.connect({\n      Authorization: 'Bearer ' + accessToken,\n      'Content-Type': 'application/json'\n    }, () => {\n      var _client$current;\n      // 연결 성공 시 해당 방을 구독하면 서버로부터 새로운 매시지를 수신 한다.\n      (_client$current = client.current) === null || _client$current === void 0 ? void 0 : _client$current.subscribe(`/sub/chat/room/${curRoomId}`, message => {\n        // 기존 대화 내역에 새로운 메시지 추가\n        setChatHistory(prevHistory => {\n          return prevHistory ? [...prevHistory, JSON.parse(message.body)] : null;\n        });\n      }, {\n        Authorization: 'Bearer ' + accessToken,\n        'Content-Type': 'application/json'\n      });\n    });\n  };\n  useEffect(() => {\n    connectHandler();\n  }, [accessToken, curRoomId]);\n\n  // 소켓을 통해 메시지를 전송\n  const sendHandler = inputValue => {\n    // client.current가 존재하고 연결되었다면 메시지 전송\n    if (client.current && client.current.connected) {\n      client.current.send('/pub/chat/message', {\n        Authorization: 'Bearer ' + accessToken,\n        'Content-Type': 'application/json'\n      },\n      // JSON 형식으로 전송한다\n      JSON.stringify({\n        type: 'TALK',\n        roomId: curRoomId,\n        message: inputValue\n      }));\n    }\n  };\n  const handleBackIconClick = () => {\n    sessionStorage.clear();\n    navigate(-1);\n  };\n  const handleDeleteChatRoom = () => {\n    deleteChatRoom(accessToken, curRoomId);\n    // sessionStorage.clear();\n    navigate(-1);\n  };\n  useEffect(() => {\n    sendHandler(inputValue);\n  }, [inputValue]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBarTitle, {\n      type: \"high\",\n      backIcon: true,\n      prevTitle: \"\\uB4A4\\uB85C\",\n      centerTitle: sellerId,\n      moreIcon: true,\n      preTitleClick: handleBackIconClick,\n      rightTitleClick: handleDeleteChatRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatRoomItem, {\n      curProductsId: curProductsId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatRoomContents, {\n      chatHistory: chatHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInputBar, {\n      onChange: setInputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChattingPage, \"LIAv565G7FUiQGvcRMC9t9RjKJs=\", false, function () {\n  return [useNavigate, useAsync];\n});\n_c = ChattingPage;\nexport default ChattingPage;\nvar _c;\n$RefreshReg$(_c, \"ChattingPage\");","map":{"version":3,"names":["useNavigate","useEffect","useRef","useState","SockJS","Stomp","BASE_URL","useAsync","ACCESS_TOKEN","getSeller","getChatDetails","deleteChatRoom","ChatRoomContents","ChatRoomItem","ChatInputBar","NavBarTitle","jsxDEV","_jsxDEV","Fragment","_Fragment","ChattingPage","_s","_sellerData$data","navigate","accessToken","localStorage","getItem","client","curRoomId","sessionStorage","undefined","curProductsId","sellerData","sellerId","data","chatHistory","setChatHistory","inputValue","setInputValue","checkChatDetails","chatDetails","error","console","connectHandler","socket","current","over","connect","Authorization","_client$current","subscribe","message","prevHistory","JSON","parse","body","sendHandler","connected","send","stringify","type","roomId","handleBackIconClick","clear","handleDeleteChatRoom","children","backIcon","prevTitle","centerTitle","moreIcon","preTitleClick","rightTitleClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/sarang_daddy/Documents/second-hand/frontend/src/pages/Chatting/index.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\n\nimport SockJS from 'sockjs-client';\nimport { Stomp, CompatClient } from '@stomp/stompjs';\nimport { BASE_URL } from '../../constants/api';\nimport useAsync from '../../hooks/useAsync';\nimport { ACCESS_TOKEN } from '../../constants/login';\nimport { getSeller } from '../../api/member';\nimport { getChatDetails, deleteChatRoom } from '../../api/chat';\n\nimport ChatRoomContents from '../../components/ChatRoomContents';\nimport ChatRoomItem from '../../components/ChatRoomItem';\nimport ChatInputBar from '../../components/ChatInputBar';\nimport NavBarTitle from '../../components/NavBarTitle';\nimport { ChatHistoryProps } from '../../constants/types';\n\nconst ChattingPage = () => {\n  const navigate = useNavigate();\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  // Stomp의 CompatClient 객체를 참조하는 객체 (리렌더링에도 유지를 위해 useRef 사용)\n  // Stomp라이브러리와 소켓 연결을 수행하는 cliet객체에 접근할 수 있게 해준다.\n  const client = useRef<CompatClient | null>(null);\n\n  const curRoomId = sessionStorage.getItem('curRoomId') || undefined;\n  const curProductsId = sessionStorage.getItem('curProductsId') || undefined;\n\n  // TODO : 판매자 번호 (추후 닉네임으로 받기)\n  const sellerData = useAsync(() => getSeller(accessToken, curRoomId));\n  const sellerId = sellerData?.data?.data.sellerId;\n\n  const [chatHistory, setChatHistory] = useState<ChatHistoryProps[] | null>(\n    null,\n  );\n  const [inputValue, setInputValue] = useState('');\n\n  // 채팅 내역 조회하고 불러오기\n  const checkChatDetails = async () => {\n    try {\n      const chatDetails = await getChatDetails(accessToken, curRoomId);\n      setChatHistory(chatDetails);\n    } catch (error) {\n      console.error('채팅 내역 불러오기 에러:', error);\n    }\n  };\n\n  useEffect(() => {\n    checkChatDetails();\n  }, [accessToken, curRoomId]);\n\n  // 소켓 연결\n  const connectHandler = () => {\n    // SockJS 클라이언트 객체를 생성하고, 웹 소켓을 연결한다.\n    // ws-stomp는 서버의 Endpoint 경로로, 웹 소켓 통신을 위한 특정 경로를 의미한다.\n    const socket = new SockJS(`${BASE_URL}/ws-stomp`);\n\n    // SockJS 클라이언트 객체 socket를 STOMP 프로토콜로 오버랩하여 client.current에 할당\n    client.current = Stomp.over(socket);\n    // 클라이언트 객체를 서버와 연결\n    client.current.connect(\n      {\n        Authorization: 'Bearer ' + accessToken,\n        'Content-Type': 'application/json',\n      },\n      () => {\n        // 연결 성공 시 해당 방을 구독하면 서버로부터 새로운 매시지를 수신 한다.\n        client.current?.subscribe(\n          `/sub/chat/room/${curRoomId}`,\n          (message) => {\n            // 기존 대화 내역에 새로운 메시지 추가\n            setChatHistory((prevHistory) => {\n              return prevHistory\n                ? [...prevHistory, JSON.parse(message.body)]\n                : null;\n            });\n          },\n          {\n            Authorization: 'Bearer ' + accessToken,\n            'Content-Type': 'application/json',\n          },\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    connectHandler();\n  }, [accessToken, curRoomId]);\n\n  // 소켓을 통해 메시지를 전송\n  const sendHandler = (inputValue: string) => {\n    // client.current가 존재하고 연결되었다면 메시지 전송\n    if (client.current && client.current.connected) {\n      client.current.send(\n        '/pub/chat/message',\n        {\n          Authorization: 'Bearer ' + accessToken,\n          'Content-Type': 'application/json',\n        },\n        // JSON 형식으로 전송한다\n        JSON.stringify({\n          type: 'TALK',\n          roomId: curRoomId,\n          message: inputValue,\n        }),\n      );\n    }\n  };\n\n  const handleBackIconClick = () => {\n    sessionStorage.clear();\n    navigate(-1);\n  };\n\n  const handleDeleteChatRoom = () => {\n    deleteChatRoom(accessToken, curRoomId);\n    // sessionStorage.clear();\n    navigate(-1);\n  };\n\n  useEffect(() => {\n    sendHandler(inputValue);\n  }, [inputValue]);\n\n  return (\n    <>\n      <NavBarTitle\n        type=\"high\"\n        backIcon\n        prevTitle=\"뒤로\"\n        centerTitle={sellerId}\n        moreIcon\n        preTitleClick={handleBackIconClick}\n        rightTitleClick={handleDeleteChatRoom}\n      />\n      <ChatRoomItem curProductsId={curProductsId} />\n      <ChatRoomContents chatHistory={chatHistory} />\n      <ChatInputBar onChange={setInputValue} />\n    </>\n  );\n};\n\nexport default ChattingPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}