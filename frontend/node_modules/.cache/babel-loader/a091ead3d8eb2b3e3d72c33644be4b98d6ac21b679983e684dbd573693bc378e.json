{"ast":null,"code":"const elapsedTime = createdAt => {\n  const minute = 60 * 1000;\n  const hour = 60 * minute;\n  const day = 24 * hour;\n  const week = 7 * day;\n  const month = 4 * week;\n  const year = 12 * month;\n  const currentDate = new Date();\n  const createdDate = new Date(createdAt);\n  const elapsedTime = currentDate.getTime() - createdDate.getTime();\n  if (elapsedTime < hour) {\n    return getMinutesAgo(elapsedTime);\n  }\n  if (elapsedTime < day) {\n    return getHoursAgo(elapsedTime);\n  }\n  if (elapsedTime < week) {\n    return getDaysAgo(elapsedTime);\n  }\n  if (elapsedTime < month) {\n    return getWeeksAgo(elapsedTime);\n  }\n  if (elapsedTime < year) {\n    return getMonthsAgo(elapsedTime);\n  }\n  return getYearsAgo(elapsedTime);\n};\nconst getMinutesAgo = elapsedTime => {\n  const minutes = Math.floor(elapsedTime / (60 * 1000));\n  return minutes + '분 전';\n};\nconst getHoursAgo = elapsedTime => {\n  const hours = Math.floor(elapsedTime / (60 * 60 * 1000));\n  return hours + '시간 전';\n};\nconst getDaysAgo = elapsedTime => {\n  const days = Math.floor(elapsedTime / (24 * 60 * 60 * 1000));\n  return days + '일 전';\n};\nconst getWeeksAgo = elapsedTime => {\n  const weeks = Math.floor(elapsedTime / (7 * 24 * 60 * 60 * 1000));\n  return weeks + '주 전';\n};\nconst getMonthsAgo = elapsedTime => {\n  const months = Math.floor(elapsedTime / (4 * 7 * 24 * 60 * 60 * 1000));\n  return months + '개월 전';\n};\nconst getYearsAgo = elapsedTime => {\n  const years = Math.floor(elapsedTime / (12 * 4 * 7 * 24 * 60 * 60 * 1000));\n  const remainingMonths = Math.floor(elapsedTime % (12 * 4 * 7 * 24 * 60 * 60 * 1000) / (4 * 7 * 24 * 60 * 60 * 1000));\n  if (remainingMonths === 0) {\n    return years + '년 전';\n  } else {\n    return years + '년 ' + remainingMonths + '개월 전';\n  }\n};\nexport default elapsedTime;","map":{"version":3,"names":["elapsedTime","createdAt","minute","hour","day","week","month","year","currentDate","Date","createdDate","getTime","getMinutesAgo","getHoursAgo","getDaysAgo","getWeeksAgo","getMonthsAgo","getYearsAgo","minutes","Math","floor","hours","days","weeks","months","years","remainingMonths"],"sources":["/Users/sarang_daddy/Documents/second-hand/frontend/src/utils/elapsedTime.ts"],"sourcesContent":["const elapsedTime = (createdAt: string) => {\n  const minute = 60 * 1000;\n  const hour = 60 * minute;\n  const day = 24 * hour;\n  const week = 7 * day;\n  const month = 4 * week;\n  const year = 12 * month;\n\n  const currentDate = new Date();\n  const createdDate = new Date(createdAt);\n  const elapsedTime = currentDate.getTime() - createdDate.getTime();\n\n  if (elapsedTime < hour) {\n    return getMinutesAgo(elapsedTime);\n  }\n\n  if (elapsedTime < day) {\n    return getHoursAgo(elapsedTime);\n  }\n\n  if (elapsedTime < week) {\n    return getDaysAgo(elapsedTime);\n  }\n\n  if (elapsedTime < month) {\n    return getWeeksAgo(elapsedTime);\n  }\n\n  if (elapsedTime < year) {\n    return getMonthsAgo(elapsedTime);\n  }\n\n  return getYearsAgo(elapsedTime);\n};\n\nconst getMinutesAgo = (elapsedTime: number) => {\n  const minutes = Math.floor(elapsedTime / (60 * 1000));\n  return minutes + '분 전';\n};\n\nconst getHoursAgo = (elapsedTime: number) => {\n  const hours = Math.floor(elapsedTime / (60 * 60 * 1000));\n  return hours + '시간 전';\n};\n\nconst getDaysAgo = (elapsedTime: number) => {\n  const days = Math.floor(elapsedTime / (24 * 60 * 60 * 1000));\n  return days + '일 전';\n};\n\nconst getWeeksAgo = (elapsedTime: number) => {\n  const weeks = Math.floor(elapsedTime / (7 * 24 * 60 * 60 * 1000));\n  return weeks + '주 전';\n};\n\nconst getMonthsAgo = (elapsedTime: number) => {\n  const months = Math.floor(elapsedTime / (4 * 7 * 24 * 60 * 60 * 1000));\n  return months + '개월 전';\n};\n\nconst getYearsAgo = (elapsedTime: number) => {\n  const years = Math.floor(elapsedTime / (12 * 4 * 7 * 24 * 60 * 60 * 1000));\n  const remainingMonths = Math.floor(\n    (elapsedTime % (12 * 4 * 7 * 24 * 60 * 60 * 1000)) /\n      (4 * 7 * 24 * 60 * 60 * 1000),\n  );\n\n  if (remainingMonths === 0) {\n    return years + '년 전';\n  } else {\n    return years + '년 ' + remainingMonths + '개월 전';\n  }\n};\n\nexport default elapsedTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}