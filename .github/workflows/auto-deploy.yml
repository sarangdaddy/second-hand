name: Java CI with Gradle & Deploy to EC2

# main 브런치에 push가 되면 아래의 flow가 실행됩니다.
on:
  push:
    branches: [ "BE-release-v3" ]

# flow에서 사용할 변수 같은 느낌입니다.
env:
  working-directory: ./backend
  docker-container-name: second-hand-be
  docker-image-name: ${{ secrets.DOCKERHUB_USERNAME }}/second-hand-be

permissions:
  contents: read


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    # 아래의 flow들이 차례대로 실행됩니다.
    steps:
      # 1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 11 셋팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # 3) gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.working-directory }}

      - run: touch ./backend/src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./backend/src/main/resources/application.properties
      - run: cat ./backend/src/main/resources/application.properties

      # 4) gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test
        working-directory: ${{ env.working-directory }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.docker-image-name }}


      - name: Pull and restart Docker Container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          script: |
            sudo docker stop ${{ env.docker-container-name }}
            sudo docker rmi ${{ env.docker-image-name }}
            sudo docker pull ${{ env.docker-image-name }}
            sudo docker run -d --rm --name ${{ env.docker-container-name }} -p 8080:8080 ${{ env.docker-image-name }}